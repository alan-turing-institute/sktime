# AppVeyor.com is a Continuous Integration service to build and run tests under
# Windows

# adapted from https://packaging.python.org/guides/supporting-windows-using-appveyor/ and
# https://github.com/scikit-learn/scikit-learn/blob/master/appveyor.yml


environment:
  global:
    # SDK v7.0 MSVC Express 2008's SetEnv.cmd script will fail if the
    # /E:ON and /V:ON options are not enabled in the batch script interpreter
    # See: https://stackoverflow.com/a/13751649/163740
    CMD_IN_ENV: "cmd /E:ON /V:ON /C .\\build_tools\\appveyor\\run_with_env.cmd"

  matrix:
    - PYTHON: "C:\\Python37-x64"
      PYTHON_VERSION: "3.7.0"
      PYTHON_ARCH: "64"
      CHECK_WARNINGS: "true"

# Because we only have a single worker, we don't want to waste precious
# appveyor CI time and make other PRs wait for repeated failures in a failing
# PR. The following option cancels pending jobs in a given PR after the first
# job failure in that specific PR.
matrix:
    fast_finish: true


install:
  # If there is a newer build queued for the same PR, cancel this one.
  # The AppVeyor 'rollout builds' option is supposed to serve the same
  # purpose but is problematic because it tends to cancel builds pushed
  # directly to master instead of just PR builds.
  # credits: JuliaLang developers.
  - ps: if ($env:APPVEYOR_PULL_REQUEST_NUMBER -and $env:APPVEYOR_BUILD_NUMBER -ne ((Invoke-RestMethod `
        https://ci.appveyor.com/api/projects/$env:APPVEYOR_ACCOUNT_NAME/$env:APPVEYOR_PROJECT_SLUG/history?recordsNumber=500).builds | `
        Where-Object pullRequestId -eq $env:APPVEYOR_PULL_REQUEST_NUMBER)[0].buildNumber) { `
        throw "There are newer queued builds for this pull request, failing early." }

  # Install Python (from the official .msi of https://python.org) and pip when
  # not already installed.
  - "powershell ./build_tools/appveyor/install.ps1"
  - "SET PATH=%PYTHON%;%PYTHON%\\Scripts;%PATH%"
  - "python -m pip install -U pip"

  # Check that we have the expected version and architecture for Python
  - "python --version"
  - "python -c \"import struct; print(struct.calcsize('P') * 8)\""
  - "pip --version"

  # Install the build and runtime dependencies of the project.
  - "%CMD_IN_ENV% pip install --timeout=60 --trusted-host 28daf2247a33ed269873-7b1aad3fab3cc330e1fd9d109892382a.r6.cf2.rackcdn.com -r build_tools/appveyor/requirements.txt"
  - "%CMD_IN_ENV% python setup.py bdist_wheel bdist_wininst"
  - ps: "ls dist"

  # Install the generated wheel package to test it
  - "pip install --pre --no-index --find-links dist/ sktime"

  # If there is a newer build queued for the same PR, cancel this one.
  # credits: JuliaLang developers.
  - ps: if ($env:APPVEYOR_PULL_REQUEST_NUMBER -and $env:APPVEYOR_BUILD_NUMBER -ne ((Invoke-RestMethod `
        https://ci.appveyor.com/api/projects/$env:APPVEYOR_ACCOUNT_NAME/$env:APPVEYOR_PROJECT_SLUG/history?recordsNumber=500).builds | `
        Where-Object pullRequestId -eq $env:APPVEYOR_PULL_REQUEST_NUMBER)[0].buildNumber) { `
        throw "There are newer queued builds for this pull request, failing early." }

# Not a .NET project, we build sktime in the install step instead
build: false

test_script:
  # Change to a non-source folder to make sure we run the tests on the
  # installed library.
  - mkdir "../empty_folder"
  - cd "../empty_folder"
  - ps: >-
        if (Test-Path variable:global:CHECK_WARNINGS) {
            $env:PYTEST_ARGS = "-Werror::DeprecationWarning -Werror::FutureWarning"
        } else {
            $env:PYTEST_ARGS = ""
        }
  - "pytest --showlocals --durations=20 %PYTEST_ARGS% --pyargs sktime"
  # Move back to the project folder
  - cd "../sktime"

artifacts:
  # Archive the generated wheel package in the ci.appveyor.com build report.
  - path: dist\*

#on_success:
#  You can use this step to upload your artifacts to a public website.
#  See Appveyor's documentation for more details. Or you can simply
#  access your wheels from the Appveyor "artifacts" tab for your build.

# upload artifacts to Github releases
deploy:
  - provider: GitHub
    description: 'appveyor draft release'
    auth_token:
      secure: I7Q//pymos/j6j6A6NmsxAdzi9YTJm0cCIha1LTDZOdrONHDACl2gZQ187ublAVk # your encrypted token from GitHub
    artifact: /.*\.whl/            # upload all wheel packages to release assets
    draft: true
    on:
      branch: master                 # release from master branch only
      APPVEYOR_REPO_TAG: true       # release on tags only